"""
Converts raw scrobbles table to updated scrobbles table for analysis.
Converts all item_url strings to numeric item IDs
"""
import sys
sys.path.append('../bin')
import dbMethods
import datetime
import MySQLdb
import MySQLdb.cursors
import time
import cPickle

### Set up cursors
db = MySQLdb.connect(host="127.0.0.1", user="root", passwd="root",db="analysis_lastfm")

## UPDATED - now we're adding to the existing table, not replacing everything
"""
cursor=db.cursor()
cursor.execute("DROP TABLE IF EXISTS lastfm_scrobbles;")
print 'Old table dropped'
# Create new scrobble table
cursor.execute("CREATE TABLE lastfm_scrobbles ( \
	user_id int unsigned NOT NULL, \
	item_id int unsigned NOT NULL, \
	artist_id int unsigned NOT NULL, \
	scrobble_time timestamp NOT NULL, \
	index (item_id), \
	index (user_id), \
	index (scrobble_time), \
	index (artist_id) \
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;")
db.commit()
cursor.close()
print 'New table setup'
"""

# Load item dictionary generated by prepAnnoTable.py
itemDict = cPickle.load(open('itemDict'))
print 'Dict loaded...'+str(len(itemDict))+' items total'

# just for feedback on the script's progress
count = 0 
startTime = time.time()


cursor=db.cursor()

users = []
last = None

for row in open("d:/scrobble_sample_2.tsv"):
	try:
		row = row.strip().split('\t')

		if count > 0:
			if count % 100000 == 0: # Every 100,000 rows, printout progress so far
				minSinceStart = (time.time() - startTime) / 60.0
				print count, minSinceStart, minSinceStart / (count/100000)
				if count % 1000000 == 0: # every million rows, commit new rows to analysis database
					db.commit()

		itemURL = row[1].strip().lower()
		spl = itemURL.split('/')
		if spl[0]=='+noredirect':
			artistName = spl[1]
			itemURL = '/'.join(spl[1:])
		else:
			artistName = spl[0]
		timestamp = row[2]

		itemID = itemDict.get(itemURL)
		artistName = itemURL.split('/')[0]
		artistID = itemDict.get(artistName)
		
		if not itemID:
			itemID = dbMethods.itemIDfromURL(itemURL,check=False)
			itemDict[itemURL] = itemID
		if not artistID:
			artistID = dbMethods.itemIDfromURL(artistName,check=False)
			itemDict[artistName] = artistID

		userID = row[0]
		if userID != last:
			last = userID
			if userID not in users:
				cursor.execute("update lastfm_users set scrobbles_recorded=1 where user_id=%s",userID)
				users.append(userID)

		cursor.execute("insert ignore into lastfm_scrobbles (user_id,item_id,artist_id,scrobble_time) values (%s,%s,%s,%s)",(userID,itemID,artistID,timestamp))

		count += 1

	except KeyboardInterrupt:
		print 'INTERRUPTED - starting cleanup'
		db.commit()
		cursor.close()
		print 'All pending db changes committed....beginning to write itemDict to disk...'
		cPickle.dump(itemDict,open('itemDict','w'))
		print 'itemDict updated...recording last row'
		print row
		print count
		open('err','w').write(row+'\n'+str(count))
		print "And we're done"
		sys.exit()

# Clean everything up, and write updated item dictionary to file
db.commit()
cursor.close()         
cPickle.dump(itemDict,open('itemDict','w'))
